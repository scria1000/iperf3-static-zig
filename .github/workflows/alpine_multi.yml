name: Build iperf3 multi static via alpine

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [iperf3]
        os_id: [alpine]
        os_version_id: [edge]
        arch: [i386, amd64, arm32v6, arm32v7, arm64v8, ppc64le, s390x]
        include:
          - arch: i386
            docker_arch: linux/i386
          - arch: amd64
            docker_arch: linux/amd64
          - arch: arm32v6
            docker_arch: linux/arm/v6
          - arch: arm32v7
            docker_arch: linux/arm/v7
          - arch: arm64v8
            docker_arch: linux/arm64
          - arch: ppc64le
            docker_arch: linux/ppc64le
          - arch: s390x
            docker_arch: linux/s390x

    name: ${{ matrix.name }} ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.arch }}

    env:
      CDN: http://dl-cdn.alpinelinux.org/alpine/edge/main/
      CXXFLAGS: "--static -static -std=c++17"
      CPPFLAGS: "--static -static"
      LDFLAGS: "--static -static"

    steps:
      - uses: actions/checkout@v3

      - name: Docker multiarch bootstrap
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Create docker multiarch ${{ matrix.docker_arch }} container
        run: docker run --name multiarch -it -d -w /root -e CXXFLAGS="${{ env.CXXFLAGS }}" -e CPPFLAGS="${{ env.CPPFLAGS }}" -e LDFLAGS="${{ env.LDFLAGS }}" --platform ${{ matrix.docker_arch }} -v ${{ github.workspace }}:/root ${{ matrix.arch }}/${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Run apk update
        run: docker exec multiarch apk update --repository=${{ env.CDN }}

      - name: Run apk upgrade
        run: docker exec multiarch apk upgrade --repository=${{ env.CDN }}

      - name: Run apk to install the core build dependencies
        run: docker exec multiarch apk add build-base pkgconf autoconf automake curl libtool git tar curl perl openssl-dev openssl-libs-static linux-headers

      - name: Git clone ${{ matrix.name }}
        run: docker exec multiarch git clone https://github.com/esnet/iperf.git /root/${{ matrix.name }}

      - name: Configure ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch ./configure --disable-shared --with-openssl=/usr --enable-static-bin --prefix=/root

      - name: Make Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch make -j$(nproc)

      - name: Make Install Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch make install

      - name: Rename ${{ matrix.name }} to ${{ matrix.name }}-${{ matrix.arch }}
        run: docker exec multiarch mv -f /root/bin/${{ matrix.name }} /root/bin/${{ matrix.name }}-${{ matrix.arch }}

      - name: Create path to binary env
        run: echo "binary_path=$(echo ${{ github.workspace }}/bin/${{ matrix.name }}-${{ matrix.arch }})" >> $GITHUB_ENV

      - name: Create tag env
        run: |
          echo "release_tag=$(sed -rn 's|(.*)\[(.*)],\[https://github.com/esnet/iperf],(.*)|\2|p' ${{ matrix.name }}/configure.ac)" >> $GITHUB_ENV

      - name: "Create release"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: ${{ env.binary_path }}
          replacesArtifacts: true
          tag: ${{ env.release_tag }}
          name: ${{ matrix.name }} ${{ env.release_tag }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
